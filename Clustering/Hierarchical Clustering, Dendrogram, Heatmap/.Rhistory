col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_2,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
plot(Energy_sub_metering_1,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("toright", legend=c("a","b","c"), col=plot_colors,
pch=21:23, lty=1:3)
legend("topright", legend=c("a","b","c"), col=plot_colors,
pch=21:23, lty=1:3)
legend("topright", legend=c("a","b","c"), col=c(rgb(0,0,0),"red","blue"),
pch=21:23, lty=1:3)
names(data_hpc_raw)
names(data_hpc_raw)[7:9]
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
## saving a plot
dev.copy(png,file="plot1.png", width=480, height=480)
dev.off()
#unfortunalely x-axis labels are not in English but in Czech, so I forced the English titles as follows
plot(Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
## saving a plot
dev.copy(png,file="plot1.png", width=480, height=480)
dev.off()
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
## saving a plot
dev.copy(png,file="plot3.png", width=480, height=480)
dev.off()
plot(Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
## saving a plot
dev.copy(png,file="plot2.png", width=480, height=480)
dev.off()
?transform
Global_active_power<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Global_active_power<-as.numeric(as.character(Global_active_power))
Voltage<-data_hpc_raw[data_hpc_raw[,5]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Voltage<-as.numeric(as.character(Voltage))
Energy_sub_metering_1<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",7]
Energy_sub_metering_1<-as.numeric(as.character(Energy_sub_metering_1))
Energy_sub_metering_2<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",8]
Energy_sub_metering_2<-as.numeric(as.character(Energy_sub_metering_2))
Energy_sub_metering_3<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",9]
Energy_sub_metering_3<-as.numeric(as.character(Energy_sub_metering_3))
Date_time <-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",c(1,2)]
Date_time <- strptime(paste(Date_time$Date,Date_time$Time),
format="%d/%m/%Y %H:%M:%S")
Global_reactive_power<-data_hpc_raw[data_hpc_raw[,4]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Global_reactive_power<-as.numeric(as.character(Global_reactive_power))
par(mfrow=c(2,2))
hist(Global_active_power$Global_active_power,
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
main="Global Active Power",
col="red")
hist(Global_active_power,
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
main="Global Active Power",
col="red")
par(mfrow=c(2,2))
plot(Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
plot(Voltage,
ylab="Voltage",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Voltage)/2,length(Voltage)),labels=c("Thu","Fri","Sat"))
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
plot(Global_reactive_power,
ylab="Global_reactive_power",
xlab="datetime",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
Global_active_power<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Global_active_power<-as.numeric(as.character(Global_active_power))
Voltage<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",5]
Voltage<-as.numeric(as.character(Voltage))
Energy_sub_metering_1<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",7]
Energy_sub_metering_1<-as.numeric(as.character(Energy_sub_metering_1))
Energy_sub_metering_2<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",8]
Energy_sub_metering_2<-as.numeric(as.character(Energy_sub_metering_2))
Energy_sub_metering_3<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",9]
Energy_sub_metering_3<-as.numeric(as.character(Energy_sub_metering_3))
Date_time <-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",c(1,2)]
Date_time <- strptime(paste(Date_time$Date,Date_time$Time),
format="%d/%m/%Y %H:%M:%S")
Global_reactive_power<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",4]
Global_reactive_power<-as.numeric(as.character(Global_reactive_power))
## creating a plot
par(mfrow=c(2,2))
#plot 1
plot(Global_active_power,
ylab="Global Active Power",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
#plot 2
plot(Voltage,
ylab="Voltage",
xlab="datetime",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Voltage)/2,length(Voltage)),labels=c("Thu","Fri","Sat"))
#plot 3
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1),
bty="n")
#plot 4
plot(Global_reactive_power,
ylab="Global_reactive_power",
xlab="datetime",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
char(`)
library(datasets)
data(airquality)
summary(airquality)
a<-summary(airquality)
a[1,1]
a[7,1]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lines
?points
?panel.Imline
?panel.lmline
bwplot(yield ~ site, barley, groups = year,
panel = function(x, y, groups, subscripts, ...) {
panel.grid(h = -1, v = 0)
panel.stripplot(x, y, ..., jitter.data = TRUE,
groups = groups, subscripts = subscripts)
panel.superpose(x, y, ..., panel.groups = panel.average,
groups = groups, subscripts = subscripts)
},
auto.key =
list(points = FALSE, lines = TRUE, columns = 2))
histogram( ~ height | voice.part, data = singer, layout = c(2, 4),
type = "density", border = "transparent", col.line = "grey60",
xlab = "Height (inches)",
ylab = "Density Histogram\n with Normal Fit",
panel = function(x, ...) {
panel.histogram(x, ...)
panel.mathdensity(dmath = dnorm,
args = list(mean=mean(x),sd=sd(x)), ...)
} )
?par
?splom
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
splom(~iris[1:3]|Species, data = iris,
layout=c(2,2), pscales = 0,
varnames = c("Sepal\nLength", "Sepal\nWidth", "Petal\nLength"),
page = function(...) {
ltext(x = seq(.6, .8, length.out = 4),
y = seq(.9, .6, length.out = 4),
labels = c("Three", "Varieties", "of", "Iris"),
cex = 2)
})
parallelplot(~iris[1:4] | Species, iris)
parallelplot(~iris[1:4], iris, groups = Species,
horizontal.axis = FALSE, scales = list(x = list(rot = 90)))
?trellis.pa.set()
?trellis.pa.set
?trellis.par.set
show.settings()
tp <- trellis.par.get()
unusual <- c("grid.pars", "fontsize", "clip", "axis.components",
"layout.heights", "layout.widths")
for (u in unusual) tp[[u]] <- NULL
names.tp <- lapply(tp, names)
unames <- sort(unique(unlist(names.tp)))
ans <- matrix(0, nrow = length(names.tp), ncol = length(unames))
rownames(ans) <- names(names.tp)
colnames(ans) <- unames
for (i in seq(along = names.tp))
ans[i, ] <- as.numeric(unames %in% names.tp[[i]])
ans <- ans[, order(-colSums(ans))]
ans <- ans[order(rowSums(ans)), ]
ans[ans == 0] <- NA
levelplot(t(ans), colorkey = FALSE,
scales = list(x = list(rot = 90)),
panel = function(x, y, z, ...) {
panel.abline(v = unique(as.numeric(x)),
h = unique(as.numeric(y)),
col = "darkgrey")
panel.xyplot(x, y, pch = 16 * z, ...)
},
xlab = "Graphical parameters",
ylab = "Setting names")
?print.trellis()
install.packages("ggplot2")
install.packages("gcookbook")
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wing,Ozone,data=airquality,facets =.~factor(Month))
library(ggplot2)
qplot(Wing,Ozone,data=airquality,facets =.~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
?aes
aes(votes,rating)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
setwd("C:/Users/Jiri/Desktop/SourceCodes/Clustering/Hierarchical Clustering")
source('~/.active-rstudio-document', echo=TRUE)
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
?dist
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
distxy
```{r}
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
rep(1:3, each = 4)
myplclust(hClustering, lab = rep(1:4, each = 3), lab.col = rep(1:3, each = 4))
myplclust(hClustering, lab = c(1,1,1,1,2,2,3,3,4,5,6,6), lab.col = c(1,1,1,1,2,2,3,3,4,5,6,6))
hClustering
hclust<-hClustering
rep(hclust$height, 2)
?rep
hclust$merge
hclust$order
?hclust
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
heatmap(dataMatrix)
?hearmap
?heatmap
require(graphics); require(grDevices)
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
utils::str(hv) # the two re-ordering index vectors
## no column dendrogram (nor reordering) at all:
heatmap(x, Colv = NA, col = cm.colors(256), scale = "column",
RowSideColors = rc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
## "no nothing"
heatmap(x, Rowv = NA, Colv = NA, scale = "column",
main = "heatmap(*, NA, NA) ~= image(t(x))")
round(Ca <- cor(attitude), 2)
symnum(Ca) # simple graphic
heatmap(Ca,               symm = TRUE, margins = c(6,6)) # with reorder()
heatmap(Ca, Rowv = FALSE, symm = TRUE, margins = c(6,6)) # _NO_ reorder()
## slightly artificial with color bar, without and with ordering:
cc <- rainbow(nrow(Ca))
heatmap(Ca, Rowv = FALSE, symm = TRUE, RowSideColors = cc, ColSideColors = cc,
margins = c(6,6))
heatmap(Ca,		symm = TRUE, RowSideColors = cc, ColSideColors = cc,
margins = c(6,6))
## For variable clustering, rather use distance based on cor():
symnum( cU <- cor(USJudgeRatings) )
hU <- heatmap(cU, Rowv = FALSE, symm = TRUE, col = topo.colors(16),
distfun = function(c) as.dist(1 - c), keep.dendro = TRUE)
## The Correlation matrix with same reordering:
round(100 * cU[hU[[1]], hU[[2]]])
## The column dendrogram:
utils::str(hU$Colv)
dataMatrix
heatmap(dataMatrix)
dataFrame
dataFrame)[sample(1:12), ]
dataFrame[sample(1:12), ]
dataMatrix
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
set.seed(143)
(dataFrame)[sample(1:12), ]
dataMatri
dataMatrix
heatmap(1:10)
heatmap(matrix(1:10,10:20)
heatmap(matrix(1:10,10:20))
?matrix
?zeros
heatmap(matrix(c(0,1,0,0,0,0,0,0,10),ncol=3,nrow=3))
matrix(c(0,1,0,0,0,0,0,0,10),ncol=3,nrow=3)
source('~/.active-rstudio-document', echo=TRUE)
# prepare hierarchical cluster
hc = hclust(dist(mtcars))
# very simple dendrogram
plot(hc)
plot(hc, hang = -1)
# tweeking some parameters
op = par(bg = "#DDE3CA")
plot(hc, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", lwd = 3, lty = 3, sub = "", hang = -1, axes = FALSE)
# add axis
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = FALSE,
lwd = 2)
# add text in margin
mtext(seq(0, 400, 100), side = 2, at = seq(0, 400, 100), line = 1,
col = "#A38630", las = 2)
par(op)
source('~/.active-rstudio-document', echo=TRUE)
```{r}
# vector of colors labelColors = c('red', 'blue', 'darkgreen', 'darkgrey',
# 'purple')
labelColors = c("#CDB380", "#036564", "#EB6841", "#EDC951")
# cut dendrogram in 4 clusters
clusMember = cutree(hc, 4)
# function to get color labels
colLab <- function(n) {
if (is.leaf(n)) {
a <- attributes(n)
labCol <- labelColors[clusMember[which(names(clusMember) == a$label)]]
attr(n, "nodePar") <- c(a$nodePar, lab.col = labCol)
}
n
}
# using dendrapply
clusDendro = dendrapply(hcd, colLab)
# make plot
plot(clusDendro, main = "Cool Dendrogram", type = "triangle")
```
install.packages('ape')
# load package ape; remember to install it: install.packages('ape')
library(ape)
# plot basic tree
plot(as.phylo(hc), cex = 0.9, label.offset = 1)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggdendro")
# install.packages('ggdendro')
library(ggdendro)
# basic option
ggdendrogram(hc)
# another option
ggdendrogram(hc, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "tomato")
# Triangular lines
ddata <- dendro_data(as.dendrogram(hc), type = "triangle")
ggplot(segment(ddata)) + geom_segment(aes(x = x, y = y, xend = xend,
yend = yend)) + ylim(-10, 150) + geom_text(data = label(ddata), aes(x = x,
y = y, label = label), angle = 90, lineheight = 0)
# load code of A2R function
source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
# colored dendrogram
op = par(bg = "#EFEFEF")
A2Rplot(hc, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B",
"#4ECDC4", "#556270"))
source('~/.active-rstudio-document', echo=TRUE)
