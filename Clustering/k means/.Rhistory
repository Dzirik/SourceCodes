axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("toright", legend=c("a","b","c"), col=plot_colors,
pch=21:23, lty=1:3)
legend("topright", legend=c("a","b","c"), col=plot_colors,
pch=21:23, lty=1:3)
legend("topright", legend=c("a","b","c"), col=c(rgb(0,0,0),"red","blue"),
pch=21:23, lty=1:3)
names(data_hpc_raw)
names(data_hpc_raw)[7:9]
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
## saving a plot
dev.copy(png,file="plot1.png", width=480, height=480)
dev.off()
#unfortunalely x-axis labels are not in English but in Czech, so I forced the English titles as follows
plot(Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
## saving a plot
dev.copy(png,file="plot1.png", width=480, height=480)
dev.off()
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
## saving a plot
dev.copy(png,file="plot3.png", width=480, height=480)
dev.off()
plot(Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
## saving a plot
dev.copy(png,file="plot2.png", width=480, height=480)
dev.off()
?transform
Global_active_power<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Global_active_power<-as.numeric(as.character(Global_active_power))
Voltage<-data_hpc_raw[data_hpc_raw[,5]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Voltage<-as.numeric(as.character(Voltage))
Energy_sub_metering_1<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",7]
Energy_sub_metering_1<-as.numeric(as.character(Energy_sub_metering_1))
Energy_sub_metering_2<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",8]
Energy_sub_metering_2<-as.numeric(as.character(Energy_sub_metering_2))
Energy_sub_metering_3<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",9]
Energy_sub_metering_3<-as.numeric(as.character(Energy_sub_metering_3))
Date_time <-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",c(1,2)]
Date_time <- strptime(paste(Date_time$Date,Date_time$Time),
format="%d/%m/%Y %H:%M:%S")
Global_reactive_power<-data_hpc_raw[data_hpc_raw[,4]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Global_reactive_power<-as.numeric(as.character(Global_reactive_power))
par(mfrow=c(2,2))
hist(Global_active_power$Global_active_power,
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
main="Global Active Power",
col="red")
hist(Global_active_power,
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
main="Global Active Power",
col="red")
par(mfrow=c(2,2))
plot(Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
plot(Voltage,
ylab="Voltage",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Voltage)/2,length(Voltage)),labels=c("Thu","Fri","Sat"))
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1))
plot(Global_reactive_power,
ylab="Global_reactive_power",
xlab="datetime",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
Global_active_power<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",3]
Global_active_power<-as.numeric(as.character(Global_active_power))
Voltage<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",5]
Voltage<-as.numeric(as.character(Voltage))
Energy_sub_metering_1<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",7]
Energy_sub_metering_1<-as.numeric(as.character(Energy_sub_metering_1))
Energy_sub_metering_2<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",8]
Energy_sub_metering_2<-as.numeric(as.character(Energy_sub_metering_2))
Energy_sub_metering_3<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",9]
Energy_sub_metering_3<-as.numeric(as.character(Energy_sub_metering_3))
Date_time <-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",c(1,2)]
Date_time <- strptime(paste(Date_time$Date,Date_time$Time),
format="%d/%m/%Y %H:%M:%S")
Global_reactive_power<-data_hpc_raw[data_hpc_raw[,1]=="1/2/2007" | data_hpc_raw[,1]=="2/2/2007",4]
Global_reactive_power<-as.numeric(as.character(Global_reactive_power))
## creating a plot
par(mfrow=c(2,2))
#plot 1
plot(Global_active_power,
ylab="Global Active Power",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
#plot 2
plot(Voltage,
ylab="Voltage",
xlab="datetime",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Voltage)/2,length(Voltage)),labels=c("Thu","Fri","Sat"))
#plot 3
plot(Energy_sub_metering_1,
ylab="Energy sub metering",
xlab="",
type="l",
col=rgb(0,0,0),
xaxt="n")
lines(Energy_sub_metering_2,
type="l",
col="red")
lines(Energy_sub_metering_3,
type="l",
col="blue")
axis(1, at=c(1,length(Energy_sub_metering_1)/2,length(Energy_sub_metering_1)),labels=c("Thu","Fri","Sat"))
legend("topright",
legend=names(data_hpc_raw)[7:9],
col=c(rgb(0,0,0),"red","blue"),
lty=c(1,1,1),
bty="n")
#plot 4
plot(Global_reactive_power,
ylab="Global_reactive_power",
xlab="datetime",
type="l",
col=rgb(0,0,0),
xaxt="n")
axis(1, at=c(1,length(Global_active_power)/2,length(Global_active_power)),labels=c("Thu","Fri","Sat"))
char(`)
library(datasets)
data(airquality)
summary(airquality)
a<-summary(airquality)
a[1,1]
a[7,1]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lines
?points
?panel.Imline
?panel.lmline
bwplot(yield ~ site, barley, groups = year,
panel = function(x, y, groups, subscripts, ...) {
panel.grid(h = -1, v = 0)
panel.stripplot(x, y, ..., jitter.data = TRUE,
groups = groups, subscripts = subscripts)
panel.superpose(x, y, ..., panel.groups = panel.average,
groups = groups, subscripts = subscripts)
},
auto.key =
list(points = FALSE, lines = TRUE, columns = 2))
histogram( ~ height | voice.part, data = singer, layout = c(2, 4),
type = "density", border = "transparent", col.line = "grey60",
xlab = "Height (inches)",
ylab = "Density Histogram\n with Normal Fit",
panel = function(x, ...) {
panel.histogram(x, ...)
panel.mathdensity(dmath = dnorm,
args = list(mean=mean(x),sd=sd(x)), ...)
} )
?par
?splom
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
splom(~iris[1:3]|Species, data = iris,
layout=c(2,2), pscales = 0,
varnames = c("Sepal\nLength", "Sepal\nWidth", "Petal\nLength"),
page = function(...) {
ltext(x = seq(.6, .8, length.out = 4),
y = seq(.9, .6, length.out = 4),
labels = c("Three", "Varieties", "of", "Iris"),
cex = 2)
})
parallelplot(~iris[1:4] | Species, iris)
parallelplot(~iris[1:4], iris, groups = Species,
horizontal.axis = FALSE, scales = list(x = list(rot = 90)))
?trellis.pa.set()
?trellis.pa.set
?trellis.par.set
show.settings()
tp <- trellis.par.get()
unusual <- c("grid.pars", "fontsize", "clip", "axis.components",
"layout.heights", "layout.widths")
for (u in unusual) tp[[u]] <- NULL
names.tp <- lapply(tp, names)
unames <- sort(unique(unlist(names.tp)))
ans <- matrix(0, nrow = length(names.tp), ncol = length(unames))
rownames(ans) <- names(names.tp)
colnames(ans) <- unames
for (i in seq(along = names.tp))
ans[i, ] <- as.numeric(unames %in% names.tp[[i]])
ans <- ans[, order(-colSums(ans))]
ans <- ans[order(rowSums(ans)), ]
ans[ans == 0] <- NA
levelplot(t(ans), colorkey = FALSE,
scales = list(x = list(rot = 90)),
panel = function(x, y, z, ...) {
panel.abline(v = unique(as.numeric(x)),
h = unique(as.numeric(y)),
col = "darkgrey")
panel.xyplot(x, y, pch = 16 * z, ...)
},
xlab = "Graphical parameters",
ylab = "Setting names")
?print.trellis()
install.packages("ggplot2")
install.packages("gcookbook")
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wing,Ozone,data=airquality,facets =.~factor(Month))
library(ggplot2)
qplot(Wing,Ozone,data=airquality,facets =.~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
?aes
aes(votes,rating)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
setwd("C:/Users/Jiri/Desktop/SourceCodes/FS/PCA and SVD")
?image
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
t(dataMatrix)
?t
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
image(1:10, 1:40, (dataMatrix)[, nrow(dataMatrix):1])
image(1:10, 1:40, dataMatrix)
image(1:10, 1:40, t(dataMatrix))
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
?rnorm
rep(c(-1,1),each=4)
X<- cbind(rnorm(10,mean(rep(c(-1,1),each=5))),rnorm(10,mean(rep(c(2,-2),each=5)))
)
plot(X)
X<- cbind(rnorm(10,mean(rep(c(-1,1),each=5)),sd=0.1),rnorm(10,mean(rep(c(2,-2),each=5)),sd=0.1))
plot(X)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
set.seed(17)
X<- cbind(rnorm(10,mean(rep(c(-1,1),each=5)),sd=0.1),rnorm(10,mean(rep(c(2,-2),each=5)),sd=0.1))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
set.seed(17)
X<- cbind(rnorm(10,mean=(rep(c(-1,1),each=5)),sd=0.1),rnorm(10,mean(rep(c(2,-2),each=5)),sd=0.1))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
set.seed(17)
X<- cbind(rnorm(10,mean=(rep(c(-2,2),each=5)),sd=0.1),rnorm(10,mean(rep(c(2,-2),each=5)),sd=0.1))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
X
rnorm(10,mean=(rep(c(-2,2),each=5)),sd=0.1)
set.seed(17)
X<- cbind(rnorm(10,mean=(rep(c(-2,2),each=5)),sd=0.1),rnorm(10,mean=(rep(c(2,-2),each=5)),sd=0.1))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
set.seed(17)
X<- cbind(rnorm(10,mean=(rep(c(-2,2),each=5)),sd=0.5),rnorm(10,mean=(rep(c(2,-2),each=5)),sd=0.5))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
set.seed(25)
X<- cbind(rnorm(10,mean=(rep(c(-2,2),each=5)),sd=0.5),rnorm(10,mean=(rep(c(2,-2),each=5)),sd=0.5))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
set.seed(25)
X<- cbind(rnorm(10,mean=(rep(c(-1,1),each=5)),sd=0.5),rnorm(10,mean=(rep(c(1,-1),each=5)),sd=0.5))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
?scale
SVD1<-svd(scale(X))
SVD1<-svd(scale(X))
SVD1$u
SVD1$d
SVD1$v
image(t(X))
SVD1<-svd(scale(X))
SVD1$u
SVD1$d
SVD1$v
par(mfrow=c(2,2))
image(t(X))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
SVD1<-svd(scale(X))
SVD1$u
SVD1$d
SVD1$v
par(mfrow=c(2,2))
image(t(X))
plot(X[,1],X[,2],col="red",pch=18,cex=2)
text(X[,1]+0.05,X[,2]+0.05,labels=as.character(1:12))
plot(SVD1$u[,1],1:nrow(X),xlab="Row",ylab="First left singular vector")
plot(SVD1$v[,1],1:ncol(X),xlab="Col",ylab="First right singular vector")
Y<-X%*%SVD1$v
plot(Y[,1],Y[,2],col="red",pch=18,cex=2)
Y
Y<-X%*%SVD1$v
plot(Y[,1],Y[,2],col="red",pch=18,cex=2)
Y<-X%*%SVD1$v
par(mfrow=1)
plot(Y[,1],Y[,2],col="red",pch=18,cex=2)
Y<-X%*%SVD1$v
par(mfrow=c(1,1))
plot(Y[,1],Y[,2],col="red",pch=18,cex=2)
par(mfrow=c(2,1))
plot(SVD1$d,xlab="column",ylab="singular value",pch=20)
plot(SVD1$d/sum(SVD1$d),xlab="column",ylab="% vysvětlení",pch=21)
plot(SVD1$d^2/sum(SVD1$d^2),xlab="column",ylab="%vysvětlení na druhou",pch=21)
par(mfrow=c(3,1))
plot(SVD1$d,xlab="column",ylab="singular value",pch=20)
plot(SVD1$d/sum(SVD1$d),xlab="column",ylab="% vysvětlení",pch=21)
plot(SVD1$d^2/sum(SVD1$d^2),xlab="column",ylab="%vysvětlení na druhou",pch=21)
?prcomp
names(pca1)
pca1<-prcomp(X,scale=TRUE)
pca1<-prcomp(X,scale=TRUE)
names(pca1)
pca1<-prcomp(X,scale=TRUE)
pca1$sdev
pca1$rotation
pca1$x
pca1$scale
par(mfrow=c(1,1))
plot(pca1$x)
par(mfrow=c(1,1))
plot(pca1$x,main="nové souřadnice")
pca1<-prcomp(X,scale=TRUE)
pca1$sdev
pca1$sdev^2
pca1$rotation
pca1$x
pca1$scale
par(mfrow=c(1,1))
plot(pca1$x,main="nové souřadnice")
pca1<-prcomp(X,scale=TRUE)
pca1$sdev
pca1$sdev^2
pca1$rotation
pca1$x
pca1$scale
par(mfrow=c(2,2))
plot(pca1$x,main="nové souřadnice")
plot(pca1$sdev,xlab="column",ylab="singular value",pch=20)
plot(pca1$sdev/sum(pca1$sdev),xlab="column",ylab="% vysvětlení",pch=21)
plot(pca1$sdev^2/sum(pca1$sdev),xlab="column",ylab="%vysvětlení na druhou",pch=21)
?svd
SVD1$d
pca1$sdev
print("poměry")
SVD1$d[1]/SVD$d[2]
print("poměry")
SVD1$d[1]/SVD1$d[2]
SVD1$d[1]/SVD1$d[2]
SVD1$d[1]^2/SVD1$d[2]^2
SVD1$d
pca1$sdev
print("poměry")
SVD1$d[1]/SVD1$d[2]
SVD1$d[1]^2/SVD1$d[2]^2
pca1$sdev[1]/pca1$sdev[2]
pca1$sdev[1]^2/pca1$sdev[2]^2
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
setwd("C:/Users/Jiri/Desktop/SourceCodes/Clustering/k means")
setwd("C:/Users/Jiri/Desktop/SourceCodes/Clustering/k means")
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
?kmeans
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
kmeansObj$centers
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
colors()
install.packages("RColorBrewer")
